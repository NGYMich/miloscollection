var templates = require('./templates');

var Backbone = require('backbone');
var Marionette = require('backbone.marionette');
var _ = require('underscore');
var Bacon = require('baconjs').Bacon;
var $ = require('./browser-globals').$;

require('backbone.onenter');
require('backbone.bacon').enhanceBackbone(Backbone);

var templates = require('./templates');

//
// When choosing how to react to a search being made, I had two options:
//
//   1. navigate the browser to the appropriate search url
//   2: signal that a search has been made and let the creator of this
//      view handle the navigation.
//
// I choose 2 because it makes testing easier, and is less surpriseful for
// the user of the view. It also enables more common usage of it. One might
// for example want to search without altering the page URL.
//

module.exports = Marionette.ItemView.extend({
  template: _.template(templates['main']),
  events: {
    'click button#search': '_fieldChange',
    'onenter input#input-tagname': '_fieldChange'
  },

  // FIXME: don't like that the synchronization of the input and model value
  // are separated - they're mutual "duals" and should be coded as such.
  initialize: function(options) {
    _.bindAll(this, '_modelChange');

    this.options = _.defaults(options, {
      "debounce": 250,
      "default": ""
    });

    if(!this.model) this.model = new Backbone.Model;

    if(!this.model.get('query')){
      this.model.set('query', this.options['default']);
    }

    this.model.on('change:query', this._modelChange);
    this.query = new Bacon.Bus();

    this.render();
  },

  _modelChange: function() {
    this.$('input').val(this.model.get('query'));
  },

  onRender: function() {

    var $input = this.$('input');

    Bacon.mergeAll(
      $input.asEventStream('keyup').debounce(this.options.debounce),
      this.$('button').asEventStream('click')
    )
      .map(function(event) { return $input.val() })
      .toProperty("")
      .assign(this.model, 'set', 'query');
  }

});

// - To use other bunts, just install them using npm and then require() them.
// - Use module.exports to expose functionality.
